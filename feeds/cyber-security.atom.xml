<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cody Hatch - Cyber Security</title><link href="https://codyhatch.com/" rel="alternate"></link><link href="https://codyhatch.com/feeds/cyber-security.atom.xml" rel="self"></link><id>https://codyhatch.com/</id><updated>2017-10-05T22:30:00-06:00</updated><entry><title>Good Nginx HTTPS Configuration</title><link href="https://codyhatch.com/cyber-security/nginx-good-https-configuration.html" rel="alternate"></link><published>2017-10-05T22:30:00-06:00</published><updated>2017-10-05T22:30:00-06:00</updated><author><name>Cody Hatch</name></author><id>tag:codyhatch.com,2017-10-05:/cyber-security/nginx-good-https-configuration.html</id><summary type="html">&lt;p&gt;How to configure Nginx to score well on Qualys SSL Labs Test.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When configuring a web server for HTTPS, it is important to ensure your web server's configuration doesn't undermine the use of an encrypted session by using poor ciphers or not negotiating keys properly. Here are some Nginx options for a solid HTTPS/SSL configuration.&lt;/p&gt;
&lt;p&gt;I'm not going to cover obtaining SSL certificates and will just assume you have some. If not, head over to &lt;a href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt; and obtain one for free.&lt;/p&gt;
&lt;p&gt;Once you've got your certificates figured out, within the Nginx configuration, find the appropriate server block and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;443&lt;/span&gt; &lt;span class="err"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;root&lt;/span&gt;        &lt;span class="err"&gt;/var/www/site&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;ssl_certificate&lt;/span&gt;             &lt;span class="err"&gt;/path/to/cert/chain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_certificate_key&lt;/span&gt;         &lt;span class="err"&gt;/path/to/cert/privkey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_protocols&lt;/span&gt;               &lt;span class="err"&gt;TLSv1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_prefer_server_ciphers&lt;/span&gt;   &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_ciphers&lt;/span&gt;                 &lt;span class="n"&gt;ECDHE-RSA-AES256-GCM-SHA512&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;DHE-RSA-AES256-GCM-SHA512&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ECDHE-RSA-AES256-GCM-SHA384&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;DHE-RSA-AES256-GCM-SHA384&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ECDHE-RSA-AES256-SHA384&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ECDHE-RSA-AES256-SHA&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;DHE-RSA-AES256-SHA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_session_timeout&lt;/span&gt;         &lt;span class="err"&gt;10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_session_cache&lt;/span&gt; &lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SSL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_session_tickets&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_stapling&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;ssl_stapling_verify&lt;/span&gt; &lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first portion of the configuration tells the server on which ports to listen, the web root directory, and the paths to your SSL certificates. I'll briefly describe the other lines.&lt;/p&gt;
&lt;h4&gt;ssl_protocols&lt;/h4&gt;
&lt;p&gt;Here we list the protocols the server is allowed to negotiate. In this case, we are only negotiating TLSv1.2 or above.&lt;/p&gt;
&lt;h4&gt;ssl_prefer_server_ciphers&lt;/h4&gt;
&lt;p&gt;This specifies that server ciphers should be preferred over client ciphers, which helps prevent a malicious client (typically via a man-in-the-middle attack) from downgrading to a less secure cipher than you'd prefer. Enabling this forces the client to accept only from among the server's offered ciphers.&lt;/p&gt;
&lt;h4&gt;ssl_ciphers&lt;/h4&gt;
&lt;p&gt;The list of ciphers that will be supported for the HTTPS session. We only want strong ciphers here so keep this up-to-date as cryptography marches on.&lt;/p&gt;
&lt;h4&gt;ssl_session_timeout&lt;/h4&gt;
&lt;p&gt;This specifies the time during which a client may reuse the session parameters. Don't set this for too long.&lt;/p&gt;
&lt;h4&gt;ssl_session_cache&lt;/h4&gt;
&lt;p&gt;Specifies the types and sizes of caches that can be used to store session parameters. Here we are using a cache shared among all worker processes on the server and limiting the cache to 10 megabytes in size.&lt;/p&gt;
&lt;h4&gt;ssl_session_tickets&lt;/h4&gt;
&lt;p&gt;Specifies whether session resumption through the use of tickets is enabled or disabled. If enabled, according to the &lt;a href="https://tools.ietf.org/html/rfc5077"&gt;RFC&lt;/a&gt;, the "TLS server encapsulates the session state into a ticket and forwards it to the client.  The client can subsequently resume a session using the obtained ticket." The configuration I have specified disables this functionality.&lt;/p&gt;
&lt;h4&gt;ssl_stapling&lt;/h4&gt;
&lt;p&gt;We are enabling the stapling of OCSP responses, which allows the server to send the certificate of the server's certificate issuer, saving client from having to make more roundtrips, which can be detrimental on a bandwidth constrained client.&lt;/p&gt;
&lt;h4&gt;ssl_stapling_verify&lt;/h4&gt;
&lt;p&gt;Enables the verification of OCSP responses by the server.&lt;/p&gt;
&lt;p&gt;The other thing you'll want to do is to redirect all HTTP requests to HTTPS sites. This can easily be done with redirects in Nginx, even if you need to redirect multiple domains (e.g., you own the .com, .net, and .org TLDs for a domain and want them all to go to one TLD).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt;      &lt;span class="err"&gt;443&lt;/span&gt; &lt;span class="err"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;...&lt;/span&gt;

    &lt;span class="err"&gt;server_name&lt;/span&gt;  &lt;span class="err"&gt;example.com&lt;/span&gt; &lt;span class="err"&gt;www.example.com&lt;/span&gt; &lt;span class="err"&gt;example.org&lt;/span&gt; &lt;span class="err"&gt;www.example.org&lt;/span&gt; &lt;span class="err"&gt;example.net&lt;/span&gt; &lt;span class="err"&gt;www.example.net&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;if&lt;/span&gt; &lt;span class="err"&gt;($host&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;www.example.com&amp;#39;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example.org&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.example.org&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example.net&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.example.net&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^/(.*)$&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After all this is done, head over to the &lt;a href="https://www.ssllabs.com/ssltest/"&gt;SSL Server Test&lt;/a&gt; run by Qualys SSL Labs. Enter your site and see what grade you receive.&lt;/p&gt;</content><category term="Cyber Security"></category><category term="Application"></category><category term="web"></category><category term="cyber security"></category></entry><entry><title>Configure Nginx to Protect Ghost Login Page</title><link href="https://codyhatch.com/cyber-security/nginx-protect-ghost-login.html" rel="alternate"></link><published>2013-10-25T12:35:00-06:00</published><updated>2013-10-25T12:35:00-06:00</updated><author><name>Cody Hatch</name></author><id>tag:codyhatch.com,2013-10-25:/cyber-security/nginx-protect-ghost-login.html</id><summary type="html">&lt;p&gt;How to configure Nginx to protect the Ghost login page when proxying to Node.js&lt;/p&gt;</summary><content type="html">&lt;p&gt;In information security, it is not possible to be correct all the time - things will break, controls will fail, and software bugs will exist; those things are inevitable, so a key element of information security is to reduce the attack surface of a system.&lt;/p&gt;
&lt;p&gt;Wikipedia has a good definition of "attack surface":&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"The attack surface of a software environment is the code within a computer system that can be run by unauthorized users. This includes, but is not limited to: user input fields, protocols, interfaces, and services. OSSTMM 3 Defines Attack Surface as 'The lack of specific separations and functional controls that exist for that vector'. One approach to improving information security is to reduce the attack surface of a system or software. By turning off unnecessary functionality, there are fewer security risks. By having less code available to unauthorized actors, there will tend to be fewer failures. Although attack surface reduction helps prevent security failures, it does not mitigate the amount of damage an attacker could inflict once a vulnerability is found."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.ghost.org"&gt;Ghost&lt;/a&gt; is some fantastic software but will inevitably have security vulnerabilities, especially in the complex pieces within the administration functions. It would be a good idea to reduce Ghost's attack surface by restricting what systems can even access the administrative portion of Ghost, and access controls within Nginx allow us to do so if we are using Nginx to proxy connections to Ghost.&lt;/p&gt;
&lt;p&gt;Access controls within Nginix are pretty straightforward. For example, if you want to allow a specific IP address to access a portion of your site, but deny all others, you'd define the location and access controls within the server block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;server {&lt;/span&gt;
&lt;span class="err"&gt;    ...&lt;/span&gt;
&lt;span class="err"&gt;    location /mysecretlocation/ {&lt;/span&gt;
&lt;span class="err"&gt;        allow 1.1.1.1;&lt;/span&gt;
&lt;span class="err"&gt;        deny all;&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;    ...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's pretty straightforward, causing Nginx to allow connections to www.example.com/mysecretlocation by the IP address 1.1.1.1, while kicking a 403 Forbidden message to all others.&lt;/p&gt;
&lt;p&gt;This gets a little different when using Nginx to proxy connections to Ghost, but it is still pretty straightforward - we just need to add the proxy information to the location block, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;server {&lt;/span&gt;
&lt;span class="err"&gt;    ...&lt;/span&gt;
&lt;span class="err"&gt;    location /ghost/ {&lt;/span&gt;
&lt;span class="err"&gt;        allow 1.1.1.1;&lt;/span&gt;
&lt;span class="err"&gt;        deny all;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_set_header   X-Real-IP $remote_addr;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_set_header   X-Forwarded-Proto $scheme;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_set_header   Host $http_host;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_set_header   Connection &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_http_version 1.1;&lt;/span&gt;
&lt;span class="err"&gt;        proxy_pass         http://ghost_upstream_defined_in_nginx_conf;&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;    ...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This config does the same thing as before but applies it to the proxy for Ghost, which is important since the URI of &lt;code&gt;/ghost/signin&lt;/code&gt; doesn't actually exist in the website's directory root, but is only understood by Ghost. However, if an IP other than 1.1.1.1 were to go to www.mywebsite.com/ghost/signin, they would get a 403 Forbidden message.&lt;/p&gt;
&lt;p&gt;Now, when a vulnerability is identified that affects Ghost's administration functionality, the website's exposure to that vulnerability should be greatly reduced.&lt;/p&gt;
&lt;p&gt;If you have any feedback or questions, contact me on Twitter at &lt;a href="http://twitter.com/codyhatch"&gt;@codyhatch&lt;/a&gt; until I get my contact page up on this site.&lt;/p&gt;</content><category term="Cyber Security"></category><category term="Application"></category><category term="web"></category><category term="cyber security"></category></entry><entry><title>Nginx Tip - Remove Version Number</title><link href="https://codyhatch.com/cyber-security/nginx-remove-version-number.html" rel="alternate"></link><published>2013-10-24T12:06:00-06:00</published><updated>2013-10-24T12:06:00-06:00</updated><author><name>Cody Hatch</name></author><id>tag:codyhatch.com,2013-10-24:/cyber-security/nginx-remove-version-number.html</id><summary type="html">&lt;p&gt;How to remove the version number from Nginx HTTP headers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wanted to give another quick tip in the process of hardening the security of Nginx.&lt;/p&gt;
&lt;p&gt;There are a bunch of things one can do to manage and limit connections, and they're good, but something that is often overlooked is removing the version number of the web server. This isn't a security-through-obscurity thing, but rather taking whatever easy steps one can take to make things even a little bit tougher for an attacker.&lt;/p&gt;
&lt;p&gt;For example, if there is a vulnerability in a specific version of Nginx, it makes sense not to broadcast the version number running on one's server to the world, allowing anyone paying attention to easily determine whether your server is vulnerable.&lt;/p&gt;
&lt;p&gt;Of course, one can go to great lengths and change the server software name altogether by modifying Nginx's source code and recompiling, but I'm going to limit this suggestion to something that is easy and within the reach of every web admin out there.&lt;/p&gt;
&lt;p&gt;To configure Nginx to stop listing its version number in error pages and HTTP headers, add the following line to the server block in your configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;server_tokens&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all that needs to be done. Now, Nginx will only list the fact that it is an Nginx server, but exclude the version in HTTP headers and error pages.&lt;/p&gt;</content><category term="Cyber Security"></category><category term="Application"></category><category term="web"></category><category term="cyber security"></category></entry></feed>